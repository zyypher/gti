generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  email            String         @unique
  password         String
  firstName        String?
  lastName         String?
  phoneNumber      String?
  role             Role           @default(SALESPERSON)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  dataRecords      DataRecord[]
  notifications    Notification[]
  sharedPDFs       SharedPDF[]
  pushSubscription String?
}

model DataRecord {
  id        String   @id @default(uuid())
  userId    String
  data      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  description String?
  image       Bytes?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Product {
  id        String   @id @default(uuid())
  name      String
  size      String?
  tar       String?
  nicotine  String?
  co        String?
  flavor    String?
  fsp       String?
  corners   String?
  capsules  String?
  image     String?
  pdfUrl    String?
  brand     Brand    @relation(fields: [brandId], references: [id])
  brandId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  SALESPERSON
}

model Promotion {
  id        String   @id @default(uuid())
  type      String
  filePath  String?
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SharedPDF {
  id          String   @id @default(uuid())
  uniqueSlug  String   @unique
  productIds  String
  createdAt   DateTime @default(now())
  expiresAt   DateTime
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  orderId   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id         String         @id @default(uuid())
  slug       String
  name       String
  company    String
  email      String
  phone      String
  products   Json
  quantities Json
  status     OrderStatus    @default(CREATED)
  history    OrderHistory[]
  createdAt  DateTime       @default(now())
}

model OrderHistory {
  id        String   @id @default(uuid())
  orderId   String
  message   String
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  CREATED
  IN_PROGRESS
  COMPLETED
}
