generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  role          Role           @default(SALESPERSON)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  dataRecords   DataRecord[]
  notifications Notification[] // ✅ Add this relation
}

model DataRecord {
  id        String   @id @default(uuid())
  userId    String
  data      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Brand {
  id          String    @id @default(uuid())
  name        String
  description String?
  image       Bytes?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now()) @updatedAt
}

model Product {
  id        String   @id @default(uuid())
  name      String
  size      String?
  tar       String?
  nicotine  String?
  co        String?
  flavor    String?
  fsp       String?
  corners   String?
  capsules  String?
  image     String? // ✅ Stores S3 Image URL
  pdfUrl    String? // ✅ Stores S3 PDF URL
  brand     Brand    @relation(fields: [brandId], references: [id])
  brandId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  SUPERVISOR
  SALESPERSON
}

model Promotion {
  id        String   @id @default(uuid())
  type      String
  filePath  String?
  fileData  Bytes // Now it's required
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SharedPDF {
  id         String   @id @default(uuid()) // Unique ID for URL
  uniqueSlug String   @unique // Custom URL slug (random)
  productIds String // Store Product IDs as a comma-separated string
  createdAt  DateTime @default(now()) // Store timestamp
  expiresAt  DateTime // Expiry date (e.g., +30 days)
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  orderId   String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
